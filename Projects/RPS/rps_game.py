# -*- coding: utf-8 -*-
"""RPS_game.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12-WKJria1RhdUrtBh65AHp7TyM7F9b8k
"""

import random

def play(player1, player2, num_games, verbose=False):
    player1_history = []
    player2_history = []

    p1_score = 0
    p2_score = 0

    for i in range(num_games):
        p1_move = player1(player2_history[-1] if player2_history else "", player2_history)
        p2_move = player2(player1_history[-1] if player1_history else "", player1_history)

        player1_history.append(p1_move)
        player2_history.append(p2_move)

        if p1_move == p2_move:
            result = "Draw"
        elif (p1_move == "R" and p2_move == "S") or (p1_move == "P" and p2_move == "R") or (p1_move == "S" and p2_move == "P"):
            p1_score += 1
            result = "Player 1 wins"
        else:
            p2_score += 1
            result = "Player 2 wins"

        if verbose:
            print(f"Game {i+1}: Player 1 = {p1_move}, Player 2 = {p2_move} --> {result}")

    win_rate = p1_score / num_games
    print(f"Player 1 Win Rate: {win_rate:.2f}")
    return win_rate

# Bots
def quincy(prev_play, opponent_history=[]):
    return "P"

def abbey(prev_play, opponent_history=[]):
    if prev_play == "":
        return "R"
    last = opponent_history[-1]
    if last == "R":
        return "P"
    elif last == "P":
        return "S"
    else:
        return "R"

def kris(prev_play, opponent_history=[]):
    return random.choice(["R", "P", "S"])

def mrugesh(prev_play, opponent_history=[]):
    if len(opponent_history) < 3:
        return "R"
    last_three = opponent_history[-3:]
    if last_three.count("R") > last_three.count("P") and last_three.count("R") > last_three.count("S"):
        return "P"
    elif last_three.count("P") > last_three.count("S"):
        return "S"
    else:
        return "R"

